<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<% resource_title = strip_html(strip_newlines(title)) %>
<title><% if resource_title != "Index" %><%= resource_title %> | <%= metadata.title %><% else %><%= metadata.title %>: <%= metadata.tagline %><% end %></title>

<meta name="description" content="<%= metadata.description %>" />

<link rel="apple-touch-icon" sizes="180x180" href="/images/icons/system/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/images/icons/system/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/images/icons/system/favicon-16x16.png">
<link rel="manifest" href="/images/icons/system/site.webmanifest">
<link rel="stylesheet" href="<%= webpack_path :css %>" />
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.13.1/dist/cdn.min.js"></script>
<script src="<%= webpack_path :js %>" defer></script>

<script>
  let darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)')

  updateMode()
  darkModeMediaQuery.addEventListener('change', updateModeWithoutTransitions)
  window.addEventListener('storage', updateModeWithoutTransitions)

  function updateMode() {
    let isSystemDarkMode = darkModeMediaQuery.matches
    let isDarkMode = window.localStorage.isDarkMode === 'true' || (!('isDarkMode' in window.localStorage) && isSystemDarkMode)
    
    if (isDarkMode) {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }

    if (isDarkMode === isSystemDarkMode) {
      delete window.localStorage.isDarkMode
    }
  }

  function disableTransitionsTemporarily() {
    document.documentElement.classList.add('[&_*]:!transition-none')
    window.setTimeout(() => {
      document.documentElement.classList.remove('[&_*]:!transition-none')
    }, 0)
  }

  function updateModeWithoutTransitions() {
    disableTransitionsTemporarily()
    updateMode()
  }

  function toggleMode() {
    disableTransitionsTemporarily()

    let darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)')
    let isSystemDarkMode = darkModeMediaQuery.matches
    let isDarkMode = document.documentElement.classList.toggle('dark')

    if (isDarkMode === isSystemDarkMode) {
      delete window.localStorage.isDarkMode
    } else {
      window.localStorage.isDarkMode = isDarkMode
    }
  }

  function toggleDarkMode() {
    return {
      updateLightDarkMode() {
        toggleMode()
      }
    }
  }
  
  function scrollToShow() {
    return {
      sticky: false,
      lastPos: window.scrollY + 0,
      downDelay: ('<%= resource.data.layout %>' == 'home' ? document.querySelector("div[x-ref='avatar']").offsetTop : 0),
      upDelay: 64,
      home: ('<%= resource.data.layout %>' == 'home'), 
      scrollMenu() {        
        let downDelay = this.downDelay;
        let { top, height } = this.$refs.navbar.getBoundingClientRect()
        let upDelay = this.upDelay;
        let scrollY = clamp(
          window.scrollY,
          0,
          document.body.scrollHeight - window.innerHeight
        )
        
        if (this.sticky) {
          setProperty('--header-position', 'sticky')
        }

        setProperty('--content-offset', `${downDelay}px`)

        if (this.sticky || scrollY < downDelay) {
          setProperty('--header-height', `${downDelay + height}px`)
          setProperty('--header-mb', `${-downDelay}px`)
        } else if (top + height < -upDelay) {
          let offset = Math.max(height, scrollY - upDelay);
          setProperty('--header-height', `${offset}px`)
          setProperty('--header-mb', `${height - offset}px`)
        } else if (top === 0) {
          setProperty('--header-height', `${scrollY + height}px`)
          setProperty('--header-mb', `${-scrollY}px`)
        }

        if (top === 0 && scrollY > 0 && scrollY >= downDelay) {
          setProperty('--header-inner-position', 'fixed')
          removeProperty('--header-top')
          removeProperty('--avatar-top')
        } else {
          removeProperty('--header-inner-position')
          setProperty('--header-top', '0px')
          setProperty('--avatar-top', '0px')
        }
      },
      updateAvatarStyles() {
        if (!this.home) {
          return
        }

        let downDelay = this.downDelay;
        let fromScale = 1
        let toScale = 36 / 64
        let fromX = 0
        let toX = 2 / 16

        let scrollY = downDelay - window.scrollY
        console.log('scrollY', scrollY);

        let scale = (scrollY * (fromScale - toScale)) / downDelay + toScale
        scale = clamp(scale, fromScale, toScale)
        console.log('scale', scale);

        let x = (scrollY * (fromX - toX)) / downDelay + toX
        x = clamp(x, fromX, toX)
        console.log('x', x);

        let borderScale = 1 / (toScale / scale)
        let borderX = (-toX + x) * borderScale
        let borderTransform = `translate3d(${borderX}rem, 0, 0) scale(${borderScale})`

        setProperty('--avatar-image-transform', `translate3d(${x}rem, 0, 0) scale(${scale})`)

        setProperty('--avatar-border-transform', borderTransform)
        setProperty('--avatar-border-opacity', scale === toScale ? 1 : 0)
      }
    }
  }


  function clamp(number, a, b) {
    let min = Math.min(a, b)
    let max = Math.max(a, b)
    return Math.min(Math.max(number, min), max)
  }

  function setProperty(property, value) {
    document.documentElement.style.setProperty(property, value)
  }

  function removeProperty(property) {
    document.documentElement.style.removeProperty(property)
  }
</script>
<%= live_reload_dev_js %>
